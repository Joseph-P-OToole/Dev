@page "/Skills"
@inject SkillData SkillData;

<PageTitle>Skills</PageTitle>
<div class="pageContainer">
    <div class="topContainer">
        <div @onclick="() => SetLightBox( )" class="imageContainer">
            @if(galleryImage != "") {
                <img class="skillImg" src=@($"assets/screenshots/{ @galleryImage }.png") alt=@($"{ @galleryImage }") />
            }
        </div>
        <div class="textContainer">
            <h4 class="skillName">
                @galleryTitle
            </h4>
            <p class="skillDesc">
                @galleryDescription
            </p>
            @if(galleryLink != "")
            {
                <a class="skillLink" href=@($"{ @galleryLink }") target="_blank">
                    @galleryLink
                    <span class="oi oi-hand"></span>
                </a>
            }
        </div>
    </div>
    <div class="bottomContainer">
        @for(int i = 0; i < SkillData.skillIcons.Count(); i++) {
            int idx = i;
            <div @onclick="() => SetGallery(idx)" class=@($"skillIconWrapper { getState(i) } ")>
                <img class="skillIcon" src=@($"assets/techLogos/{ SkillData.skillIcons[i] }.png") alt=@($"{ SkillData.skillIcons[i] }") />
            </div>
        }
    </div>
</div>
<div @onclick="() => ClearContent()" class=@($"lightBox { lightBoxClassName }")>
    <div class="contentContainer">
        @if(contentSet) {
            <img class="lightBoxImg" src=@($"assets/screenshots/{ @galleryImage }.png") alt=@($"{ @galleryImage }") />
        }
    </div>
</div>

@code {
    string galleryDescription = "";
    string galleryTitle = "";
    string galleryImage = "";
    string galleryLink = "";
    int selectedIdx = -1;
    bool contentSet = false;
    string content = "";
    string iconState = "";
    string lightBoxClassName = "hide";

    private string getState(int idx) {
        if(idx == selectedIdx) {
            return "active";
        }else {
            return "";
        }
    }// getState

    private async Task SetGallery(int idx) {
        if(idx != -1) {
            selectedIdx = idx;
            iconState = "";
            galleryDescription = SkillData.skillDescriptions[idx];
            galleryTitle = SkillData.skillNames[idx];
            galleryImage = SkillData.skillImages[idx];
            galleryLink = SkillData.skillLinks[idx];
            await Task.Delay(1);
            StateHasChanged();
        }else {
            return;
        }
    }// SetGallery

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if(firstRender) {
            await SetGallery(0);
            StateHasChanged();
        }
    }// OnAfterRenderAsync

    private void lightBoxSetClassName() {
        if(contentSet) {
            lightBoxClassName = "show fadeIn";
        }else {
            lightBoxClassName = "show fadeOut";
            StateHasChanged();
            Task.Delay(500);
            lightBoxClassName = "hide";
        }
    }// lightBoxCetClassName

    public async void SetLightBox() {
        contentSet = true;
        lightBoxSetClassName();
        await Task.Delay(1);
    }// SetLightBox

    public void ClearContent() {
        contentSet = false;
        this.content = "";
        lightBoxSetClassName();
        StateHasChanged();
    }// ClearContent
}